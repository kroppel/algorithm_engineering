1. Explain how divide and conquer algorithms can be
parallelized with tasks in OpenMP.

One simple way to parallelize divide and conquer algorithms 
using Openmp tasks is to create a task everytime the workload
is divided. The current thread will work on one part, while
another thread can work on the other part of the workload seperately.
After all recursive calls there might be a taskwait statement
necessary, to ensure that every task has been executed before
the instructions that follow the taskwait statement are executed.

2. Describe some ways to speed up merge sort.


3. What is the idea behind multithreaded merging?
The idea here is that a pivot element is chosen out of one of
the two arrays that should be merged. With the requirement satisfied
that both arrays are sorted, the median of either of the arrays is a
good choice, as there is a high chance that this pivot divides my
whole set of values into two subsets that are about the same size.
This is good, as the remaining merge two workloads (the two sets of values
greater than and smaller than the pivot):
   -Can now be processed in parallel, as there is no dependency between
   merging all values greater than the pivot and merging all values smaller
   than the pivot.
   -Two equally-sized subsets mean a balanced workload

4. Read "What every systems programmer should know about concurrency"
and discuss two things you find particularly interesting.
