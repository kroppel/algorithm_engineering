1. What is Cython?

Cython is a compiled language and a superset of Python.
It can be used to improve the performance of native
Python code or to interface with C/C++ libraries, again
mostly to achieve better performance.
Cython code is compiled to C code, which means that the
Cython compiler only needs to do higher level optimizations
and the lower level work is done by the C compiler.

2. Describe an approach how Python programs can be
accelerated with the help of Cython.

Assuming that one wants to improve the performance of
a program that is written in native python, the first
step would be to find hotspots where most of the programs
runtime is spent. This can be done with a profiler.
When these hotspots are detected, the developer
has several options:
He can simply outsource the concerning code into a
Cython file and try to improve performance by using what
the Cython language has to offer, e.g. give type annotations,
use extension types etc.
He can implement the concerning code in C/C++ (or use available
C/C++ libraries) and provide the interface for Python through
a short Cython wrapper file. This way, the Python code calls a function
from the Cython code, which itself calls the function from the
C/C++ code.
The second approach gives the programmer more control over the
C/C++ code that is beeing executed, as only the interface is
beeing auto-generated by Cython.

3. Describe two ways for compiling a .pyx Cython
module.

The Cython module can be compiled into a C (.c) file using the cython
command. The C file can then be compiled to a shared library file (so)
by using a C compiler like gcc.
These two steps can be achieved together with the cythonize command.

4. Name and describe two compiler directives in Cython.

# cython: boundscheck = True/False
-> Set wether the Cython compiler should perform checks for invalid memory
accesses due to invalid indexing
# cython: wraparound = False
-> Set wether Cython compiler should check for and correctly handle
negative indices, as they are not supported in C

5. What is the difference between def, cdef and cpdef when
declaring a Cython function?

The main difference is that functions declared with 'def' can only be
called from Python or Cython code, while functions declared with 'cdef'
can only be called from Cython or C code. Functions declared with 'cpdef'
can be called from Python, Cython and C. For these functions, Cython
generates both a def and a cdef function. 
As a consequence, 'def' functions and 'cpdef' functions cannot take any
type of argument, only those that are included or have an equivalent 
in Python.

6. What are typed memoryviews especially useful for in
Cython?

Typed memoryviews can be used to access memory buffers efficiently,
like the underlying structures of numpy arrays, but also C arrays
or Cython arrays. This can be done without any python interaction, 
which means without any additional overhead. You only need to
wrap outsource the access into a Cython file, and you can efficiently
access these memory buffers in a Python/NumPy-like slicing/indexing syntax.
